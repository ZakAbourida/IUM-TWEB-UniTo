/*
 * MongoDBServerDocumentation
 * Documentation of MongoDB Server
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: zakaria.abourida@edu.unito.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Games
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-16T12:05:23.588206+01:00[Europe/Rome]")
public class Games {
  public static final String SERIALIZED_NAME_ATTENDANCE = "attendance";
  @SerializedName(SERIALIZED_NAME_ATTENDANCE)
  private BigDecimal attendance;

  public static final String SERIALIZED_NAME_COMPETITION_ID = "competition_id";
  @SerializedName(SERIALIZED_NAME_COMPETITION_ID)
  private String competitionId;

  public static final String SERIALIZED_NAME_COMPETITION_TYPE = "competition_type";
  @SerializedName(SERIALIZED_NAME_COMPETITION_TYPE)
  private String competitionType;

  public static final String SERIALIZED_NAME_GAME_ID = "game_id";
  @SerializedName(SERIALIZED_NAME_GAME_ID)
  private BigDecimal gameId;

  public static final String SERIALIZED_NAME_HOME_CLUB_GOALS = "home_club_goals";
  @SerializedName(SERIALIZED_NAME_HOME_CLUB_GOALS)
  private BigDecimal homeClubGoals;

  public static final String SERIALIZED_NAME_REFEREE = "referee";
  @SerializedName(SERIALIZED_NAME_REFEREE)
  private String referee;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_AGGREGATE = "aggregate";
  @SerializedName(SERIALIZED_NAME_AGGREGATE)
  private String aggregate;

  public static final String SERIALIZED_NAME_AWAY_CLUB_GOALS = "away_club_goals";
  @SerializedName(SERIALIZED_NAME_AWAY_CLUB_GOALS)
  private BigDecimal awayClubGoals;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private LocalDate date;

  public static final String SERIALIZED_NAME_HOME_CLUB_ID = "home_club_id";
  @SerializedName(SERIALIZED_NAME_HOME_CLUB_ID)
  private BigDecimal homeClubId;

  public static final String SERIALIZED_NAME_ROUND = "round";
  @SerializedName(SERIALIZED_NAME_ROUND)
  private String round;

  public static final String SERIALIZED_NAME_AWAY_CLUB_ID = "away_club_id";
  @SerializedName(SERIALIZED_NAME_AWAY_CLUB_ID)
  private BigDecimal awayClubId;

  public static final String SERIALIZED_NAME_HOME_CLUB_MANAGER_NAME = "home_club_manager_name";
  @SerializedName(SERIALIZED_NAME_HOME_CLUB_MANAGER_NAME)
  private String homeClubManagerName;

  public static final String SERIALIZED_NAME_SEASON = "season";
  @SerializedName(SERIALIZED_NAME_SEASON)
  private BigDecimal season;

  public static final String SERIALIZED_NAME_AWAY_CLUB_MANAGER_NAME = "away_club_manager_name";
  @SerializedName(SERIALIZED_NAME_AWAY_CLUB_MANAGER_NAME)
  private String awayClubManagerName;

  public static final String SERIALIZED_NAME_HOME_CLUB_NAME = "home_club_name";
  @SerializedName(SERIALIZED_NAME_HOME_CLUB_NAME)
  private String homeClubName;

  public static final String SERIALIZED_NAME_STADIUM = "stadium";
  @SerializedName(SERIALIZED_NAME_STADIUM)
  private String stadium;

  public static final String SERIALIZED_NAME_AWAY_CLUB_NAME = "away_club_name";
  @SerializedName(SERIALIZED_NAME_AWAY_CLUB_NAME)
  private String awayClubName;

  public static final String SERIALIZED_NAME_HOME_CLUB_POSITION = "home_club_position";
  @SerializedName(SERIALIZED_NAME_HOME_CLUB_POSITION)
  private BigDecimal homeClubPosition;

  public static final String SERIALIZED_NAME_AWAY_CLUB_POSITION = "away_club_position";
  @SerializedName(SERIALIZED_NAME_AWAY_CLUB_POSITION)
  private BigDecimal awayClubPosition;

  public Games() {
  }

  public Games attendance(BigDecimal attendance) {
    
    this.attendance = attendance;
    return this;
  }

   /**
   * Get attendance
   * @return attendance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getAttendance() {
    return attendance;
  }


  public void setAttendance(BigDecimal attendance) {
    this.attendance = attendance;
  }


  public Games competitionId(String competitionId) {
    
    this.competitionId = competitionId;
    return this;
  }

   /**
   * Get competitionId
   * @return competitionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCompetitionId() {
    return competitionId;
  }


  public void setCompetitionId(String competitionId) {
    this.competitionId = competitionId;
  }


  public Games competitionType(String competitionType) {
    
    this.competitionType = competitionType;
    return this;
  }

   /**
   * Get competitionType
   * @return competitionType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCompetitionType() {
    return competitionType;
  }


  public void setCompetitionType(String competitionType) {
    this.competitionType = competitionType;
  }


  public Games gameId(BigDecimal gameId) {
    
    this.gameId = gameId;
    return this;
  }

   /**
   * Get gameId
   * @return gameId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getGameId() {
    return gameId;
  }


  public void setGameId(BigDecimal gameId) {
    this.gameId = gameId;
  }


  public Games homeClubGoals(BigDecimal homeClubGoals) {
    
    this.homeClubGoals = homeClubGoals;
    return this;
  }

   /**
   * Get homeClubGoals
   * @return homeClubGoals
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getHomeClubGoals() {
    return homeClubGoals;
  }


  public void setHomeClubGoals(BigDecimal homeClubGoals) {
    this.homeClubGoals = homeClubGoals;
  }


  public Games referee(String referee) {
    
    this.referee = referee;
    return this;
  }

   /**
   * Get referee
   * @return referee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getReferee() {
    return referee;
  }


  public void setReferee(String referee) {
    this.referee = referee;
  }


  public Games url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  public Games aggregate(String aggregate) {
    
    this.aggregate = aggregate;
    return this;
  }

   /**
   * Get aggregate
   * @return aggregate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAggregate() {
    return aggregate;
  }


  public void setAggregate(String aggregate) {
    this.aggregate = aggregate;
  }


  public Games awayClubGoals(BigDecimal awayClubGoals) {
    
    this.awayClubGoals = awayClubGoals;
    return this;
  }

   /**
   * Get awayClubGoals
   * @return awayClubGoals
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getAwayClubGoals() {
    return awayClubGoals;
  }


  public void setAwayClubGoals(BigDecimal awayClubGoals) {
    this.awayClubGoals = awayClubGoals;
  }


  public Games date(LocalDate date) {
    
    this.date = date;
    return this;
  }

   /**
   * Get date
   * @return date
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LocalDate getDate() {
    return date;
  }


  public void setDate(LocalDate date) {
    this.date = date;
  }


  public Games homeClubId(BigDecimal homeClubId) {
    
    this.homeClubId = homeClubId;
    return this;
  }

   /**
   * Get homeClubId
   * @return homeClubId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getHomeClubId() {
    return homeClubId;
  }


  public void setHomeClubId(BigDecimal homeClubId) {
    this.homeClubId = homeClubId;
  }


  public Games round(String round) {
    
    this.round = round;
    return this;
  }

   /**
   * Get round
   * @return round
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRound() {
    return round;
  }


  public void setRound(String round) {
    this.round = round;
  }


  public Games awayClubId(BigDecimal awayClubId) {
    
    this.awayClubId = awayClubId;
    return this;
  }

   /**
   * Get awayClubId
   * @return awayClubId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getAwayClubId() {
    return awayClubId;
  }


  public void setAwayClubId(BigDecimal awayClubId) {
    this.awayClubId = awayClubId;
  }


  public Games homeClubManagerName(String homeClubManagerName) {
    
    this.homeClubManagerName = homeClubManagerName;
    return this;
  }

   /**
   * Get homeClubManagerName
   * @return homeClubManagerName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getHomeClubManagerName() {
    return homeClubManagerName;
  }


  public void setHomeClubManagerName(String homeClubManagerName) {
    this.homeClubManagerName = homeClubManagerName;
  }


  public Games season(BigDecimal season) {
    
    this.season = season;
    return this;
  }

   /**
   * Get season
   * @return season
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getSeason() {
    return season;
  }


  public void setSeason(BigDecimal season) {
    this.season = season;
  }


  public Games awayClubManagerName(String awayClubManagerName) {
    
    this.awayClubManagerName = awayClubManagerName;
    return this;
  }

   /**
   * Get awayClubManagerName
   * @return awayClubManagerName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAwayClubManagerName() {
    return awayClubManagerName;
  }


  public void setAwayClubManagerName(String awayClubManagerName) {
    this.awayClubManagerName = awayClubManagerName;
  }


  public Games homeClubName(String homeClubName) {
    
    this.homeClubName = homeClubName;
    return this;
  }

   /**
   * Get homeClubName
   * @return homeClubName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getHomeClubName() {
    return homeClubName;
  }


  public void setHomeClubName(String homeClubName) {
    this.homeClubName = homeClubName;
  }


  public Games stadium(String stadium) {
    
    this.stadium = stadium;
    return this;
  }

   /**
   * Get stadium
   * @return stadium
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStadium() {
    return stadium;
  }


  public void setStadium(String stadium) {
    this.stadium = stadium;
  }


  public Games awayClubName(String awayClubName) {
    
    this.awayClubName = awayClubName;
    return this;
  }

   /**
   * Get awayClubName
   * @return awayClubName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAwayClubName() {
    return awayClubName;
  }


  public void setAwayClubName(String awayClubName) {
    this.awayClubName = awayClubName;
  }


  public Games homeClubPosition(BigDecimal homeClubPosition) {
    
    this.homeClubPosition = homeClubPosition;
    return this;
  }

   /**
   * Get homeClubPosition
   * @return homeClubPosition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getHomeClubPosition() {
    return homeClubPosition;
  }


  public void setHomeClubPosition(BigDecimal homeClubPosition) {
    this.homeClubPosition = homeClubPosition;
  }


  public Games awayClubPosition(BigDecimal awayClubPosition) {
    
    this.awayClubPosition = awayClubPosition;
    return this;
  }

   /**
   * Get awayClubPosition
   * @return awayClubPosition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getAwayClubPosition() {
    return awayClubPosition;
  }


  public void setAwayClubPosition(BigDecimal awayClubPosition) {
    this.awayClubPosition = awayClubPosition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Games games = (Games) o;
    return Objects.equals(this.attendance, games.attendance) &&
        Objects.equals(this.competitionId, games.competitionId) &&
        Objects.equals(this.competitionType, games.competitionType) &&
        Objects.equals(this.gameId, games.gameId) &&
        Objects.equals(this.homeClubGoals, games.homeClubGoals) &&
        Objects.equals(this.referee, games.referee) &&
        Objects.equals(this.url, games.url) &&
        Objects.equals(this.aggregate, games.aggregate) &&
        Objects.equals(this.awayClubGoals, games.awayClubGoals) &&
        Objects.equals(this.date, games.date) &&
        Objects.equals(this.homeClubId, games.homeClubId) &&
        Objects.equals(this.round, games.round) &&
        Objects.equals(this.awayClubId, games.awayClubId) &&
        Objects.equals(this.homeClubManagerName, games.homeClubManagerName) &&
        Objects.equals(this.season, games.season) &&
        Objects.equals(this.awayClubManagerName, games.awayClubManagerName) &&
        Objects.equals(this.homeClubName, games.homeClubName) &&
        Objects.equals(this.stadium, games.stadium) &&
        Objects.equals(this.awayClubName, games.awayClubName) &&
        Objects.equals(this.homeClubPosition, games.homeClubPosition) &&
        Objects.equals(this.awayClubPosition, games.awayClubPosition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attendance, competitionId, competitionType, gameId, homeClubGoals, referee, url, aggregate, awayClubGoals, date, homeClubId, round, awayClubId, homeClubManagerName, season, awayClubManagerName, homeClubName, stadium, awayClubName, homeClubPosition, awayClubPosition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Games {\n");
    sb.append("    attendance: ").append(toIndentedString(attendance)).append("\n");
    sb.append("    competitionId: ").append(toIndentedString(competitionId)).append("\n");
    sb.append("    competitionType: ").append(toIndentedString(competitionType)).append("\n");
    sb.append("    gameId: ").append(toIndentedString(gameId)).append("\n");
    sb.append("    homeClubGoals: ").append(toIndentedString(homeClubGoals)).append("\n");
    sb.append("    referee: ").append(toIndentedString(referee)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    aggregate: ").append(toIndentedString(aggregate)).append("\n");
    sb.append("    awayClubGoals: ").append(toIndentedString(awayClubGoals)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    homeClubId: ").append(toIndentedString(homeClubId)).append("\n");
    sb.append("    round: ").append(toIndentedString(round)).append("\n");
    sb.append("    awayClubId: ").append(toIndentedString(awayClubId)).append("\n");
    sb.append("    homeClubManagerName: ").append(toIndentedString(homeClubManagerName)).append("\n");
    sb.append("    season: ").append(toIndentedString(season)).append("\n");
    sb.append("    awayClubManagerName: ").append(toIndentedString(awayClubManagerName)).append("\n");
    sb.append("    homeClubName: ").append(toIndentedString(homeClubName)).append("\n");
    sb.append("    stadium: ").append(toIndentedString(stadium)).append("\n");
    sb.append("    awayClubName: ").append(toIndentedString(awayClubName)).append("\n");
    sb.append("    homeClubPosition: ").append(toIndentedString(homeClubPosition)).append("\n");
    sb.append("    awayClubPosition: ").append(toIndentedString(awayClubPosition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attendance");
    openapiFields.add("competition_id");
    openapiFields.add("competition_type");
    openapiFields.add("game_id");
    openapiFields.add("home_club_goals");
    openapiFields.add("referee");
    openapiFields.add("url");
    openapiFields.add("aggregate");
    openapiFields.add("away_club_goals");
    openapiFields.add("date");
    openapiFields.add("home_club_id");
    openapiFields.add("round");
    openapiFields.add("away_club_id");
    openapiFields.add("home_club_manager_name");
    openapiFields.add("season");
    openapiFields.add("away_club_manager_name");
    openapiFields.add("home_club_name");
    openapiFields.add("stadium");
    openapiFields.add("away_club_name");
    openapiFields.add("home_club_position");
    openapiFields.add("away_club_position");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Games
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Games.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Games is not found in the empty JSON string", Games.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Games.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Games` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("competition_id") != null && !jsonObj.get("competition_id").isJsonNull()) && !jsonObj.get("competition_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `competition_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("competition_id").toString()));
      }
      if ((jsonObj.get("competition_type") != null && !jsonObj.get("competition_type").isJsonNull()) && !jsonObj.get("competition_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `competition_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("competition_type").toString()));
      }
      if ((jsonObj.get("referee") != null && !jsonObj.get("referee").isJsonNull()) && !jsonObj.get("referee").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referee").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("aggregate") != null && !jsonObj.get("aggregate").isJsonNull()) && !jsonObj.get("aggregate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aggregate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aggregate").toString()));
      }
      if ((jsonObj.get("round") != null && !jsonObj.get("round").isJsonNull()) && !jsonObj.get("round").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `round` to be a primitive type in the JSON string but got `%s`", jsonObj.get("round").toString()));
      }
      if ((jsonObj.get("home_club_manager_name") != null && !jsonObj.get("home_club_manager_name").isJsonNull()) && !jsonObj.get("home_club_manager_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `home_club_manager_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("home_club_manager_name").toString()));
      }
      if ((jsonObj.get("away_club_manager_name") != null && !jsonObj.get("away_club_manager_name").isJsonNull()) && !jsonObj.get("away_club_manager_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `away_club_manager_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("away_club_manager_name").toString()));
      }
      if ((jsonObj.get("home_club_name") != null && !jsonObj.get("home_club_name").isJsonNull()) && !jsonObj.get("home_club_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `home_club_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("home_club_name").toString()));
      }
      if ((jsonObj.get("stadium") != null && !jsonObj.get("stadium").isJsonNull()) && !jsonObj.get("stadium").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stadium` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stadium").toString()));
      }
      if ((jsonObj.get("away_club_name") != null && !jsonObj.get("away_club_name").isJsonNull()) && !jsonObj.get("away_club_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `away_club_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("away_club_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Games.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Games' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Games> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Games.class));

       return (TypeAdapter<T>) new TypeAdapter<Games>() {
           @Override
           public void write(JsonWriter out, Games value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Games read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Games given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Games
  * @throws IOException if the JSON string is invalid with respect to Games
  */
  public static Games fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Games.class);
  }

 /**
  * Convert an instance of Games to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

