/*
 * MongoDBServerDocumentation
 * Documentation of MongoDB Server
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: zakaria.abourida@edu.unito.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ClubGames
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-16T12:05:23.588206+01:00[Europe/Rome]")
public class ClubGames {
  public static final String SERIALIZED_NAME_CLUB_ID = "club_id";
  @SerializedName(SERIALIZED_NAME_CLUB_ID)
  private BigDecimal clubId;

  public static final String SERIALIZED_NAME_GAME_ID = "game_id";
  @SerializedName(SERIALIZED_NAME_GAME_ID)
  private BigDecimal gameId;

  public static final String SERIALIZED_NAME_HOSTING = "hosting";
  @SerializedName(SERIALIZED_NAME_HOSTING)
  private String hosting;

  public static final String SERIALIZED_NAME_OPPONENT_GOALS = "opponent_goals";
  @SerializedName(SERIALIZED_NAME_OPPONENT_GOALS)
  private BigDecimal opponentGoals;

  public static final String SERIALIZED_NAME_IS_WIN = "is_win";
  @SerializedName(SERIALIZED_NAME_IS_WIN)
  private BigDecimal isWin;

  public static final String SERIALIZED_NAME_OPPONENT_ID = "opponent_id";
  @SerializedName(SERIALIZED_NAME_OPPONENT_ID)
  private BigDecimal opponentId;

  public static final String SERIALIZED_NAME_OPPONENT_MANAGER_NAME = "opponent_manager_name";
  @SerializedName(SERIALIZED_NAME_OPPONENT_MANAGER_NAME)
  private String opponentManagerName;

  public static final String SERIALIZED_NAME_OPPONENT_POSITION = "opponent_position";
  @SerializedName(SERIALIZED_NAME_OPPONENT_POSITION)
  private BigDecimal opponentPosition;

  public static final String SERIALIZED_NAME_OWN_GOALS = "own_goals";
  @SerializedName(SERIALIZED_NAME_OWN_GOALS)
  private BigDecimal ownGoals;

  public static final String SERIALIZED_NAME_OWN_MANAGER_NAME = "own_manager_name";
  @SerializedName(SERIALIZED_NAME_OWN_MANAGER_NAME)
  private String ownManagerName;

  public static final String SERIALIZED_NAME_OWN_POSITION = "own_position";
  @SerializedName(SERIALIZED_NAME_OWN_POSITION)
  private BigDecimal ownPosition;

  public ClubGames() {
  }

  public ClubGames clubId(BigDecimal clubId) {
    
    this.clubId = clubId;
    return this;
  }

   /**
   * Get clubId
   * @return clubId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getClubId() {
    return clubId;
  }


  public void setClubId(BigDecimal clubId) {
    this.clubId = clubId;
  }


  public ClubGames gameId(BigDecimal gameId) {
    
    this.gameId = gameId;
    return this;
  }

   /**
   * Get gameId
   * @return gameId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getGameId() {
    return gameId;
  }


  public void setGameId(BigDecimal gameId) {
    this.gameId = gameId;
  }


  public ClubGames hosting(String hosting) {
    
    this.hosting = hosting;
    return this;
  }

   /**
   * Get hosting
   * @return hosting
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getHosting() {
    return hosting;
  }


  public void setHosting(String hosting) {
    this.hosting = hosting;
  }


  public ClubGames opponentGoals(BigDecimal opponentGoals) {
    
    this.opponentGoals = opponentGoals;
    return this;
  }

   /**
   * Get opponentGoals
   * @return opponentGoals
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getOpponentGoals() {
    return opponentGoals;
  }


  public void setOpponentGoals(BigDecimal opponentGoals) {
    this.opponentGoals = opponentGoals;
  }


  public ClubGames isWin(BigDecimal isWin) {
    
    this.isWin = isWin;
    return this;
  }

   /**
   * Get isWin
   * @return isWin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getIsWin() {
    return isWin;
  }


  public void setIsWin(BigDecimal isWin) {
    this.isWin = isWin;
  }


  public ClubGames opponentId(BigDecimal opponentId) {
    
    this.opponentId = opponentId;
    return this;
  }

   /**
   * Get opponentId
   * @return opponentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getOpponentId() {
    return opponentId;
  }


  public void setOpponentId(BigDecimal opponentId) {
    this.opponentId = opponentId;
  }


  public ClubGames opponentManagerName(String opponentManagerName) {
    
    this.opponentManagerName = opponentManagerName;
    return this;
  }

   /**
   * Get opponentManagerName
   * @return opponentManagerName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOpponentManagerName() {
    return opponentManagerName;
  }


  public void setOpponentManagerName(String opponentManagerName) {
    this.opponentManagerName = opponentManagerName;
  }


  public ClubGames opponentPosition(BigDecimal opponentPosition) {
    
    this.opponentPosition = opponentPosition;
    return this;
  }

   /**
   * Get opponentPosition
   * @return opponentPosition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getOpponentPosition() {
    return opponentPosition;
  }


  public void setOpponentPosition(BigDecimal opponentPosition) {
    this.opponentPosition = opponentPosition;
  }


  public ClubGames ownGoals(BigDecimal ownGoals) {
    
    this.ownGoals = ownGoals;
    return this;
  }

   /**
   * Get ownGoals
   * @return ownGoals
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getOwnGoals() {
    return ownGoals;
  }


  public void setOwnGoals(BigDecimal ownGoals) {
    this.ownGoals = ownGoals;
  }


  public ClubGames ownManagerName(String ownManagerName) {
    
    this.ownManagerName = ownManagerName;
    return this;
  }

   /**
   * Get ownManagerName
   * @return ownManagerName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOwnManagerName() {
    return ownManagerName;
  }


  public void setOwnManagerName(String ownManagerName) {
    this.ownManagerName = ownManagerName;
  }


  public ClubGames ownPosition(BigDecimal ownPosition) {
    
    this.ownPosition = ownPosition;
    return this;
  }

   /**
   * Get ownPosition
   * @return ownPosition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getOwnPosition() {
    return ownPosition;
  }


  public void setOwnPosition(BigDecimal ownPosition) {
    this.ownPosition = ownPosition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClubGames clubGames = (ClubGames) o;
    return Objects.equals(this.clubId, clubGames.clubId) &&
        Objects.equals(this.gameId, clubGames.gameId) &&
        Objects.equals(this.hosting, clubGames.hosting) &&
        Objects.equals(this.opponentGoals, clubGames.opponentGoals) &&
        Objects.equals(this.isWin, clubGames.isWin) &&
        Objects.equals(this.opponentId, clubGames.opponentId) &&
        Objects.equals(this.opponentManagerName, clubGames.opponentManagerName) &&
        Objects.equals(this.opponentPosition, clubGames.opponentPosition) &&
        Objects.equals(this.ownGoals, clubGames.ownGoals) &&
        Objects.equals(this.ownManagerName, clubGames.ownManagerName) &&
        Objects.equals(this.ownPosition, clubGames.ownPosition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clubId, gameId, hosting, opponentGoals, isWin, opponentId, opponentManagerName, opponentPosition, ownGoals, ownManagerName, ownPosition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClubGames {\n");
    sb.append("    clubId: ").append(toIndentedString(clubId)).append("\n");
    sb.append("    gameId: ").append(toIndentedString(gameId)).append("\n");
    sb.append("    hosting: ").append(toIndentedString(hosting)).append("\n");
    sb.append("    opponentGoals: ").append(toIndentedString(opponentGoals)).append("\n");
    sb.append("    isWin: ").append(toIndentedString(isWin)).append("\n");
    sb.append("    opponentId: ").append(toIndentedString(opponentId)).append("\n");
    sb.append("    opponentManagerName: ").append(toIndentedString(opponentManagerName)).append("\n");
    sb.append("    opponentPosition: ").append(toIndentedString(opponentPosition)).append("\n");
    sb.append("    ownGoals: ").append(toIndentedString(ownGoals)).append("\n");
    sb.append("    ownManagerName: ").append(toIndentedString(ownManagerName)).append("\n");
    sb.append("    ownPosition: ").append(toIndentedString(ownPosition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("club_id");
    openapiFields.add("game_id");
    openapiFields.add("hosting");
    openapiFields.add("opponent_goals");
    openapiFields.add("is_win");
    openapiFields.add("opponent_id");
    openapiFields.add("opponent_manager_name");
    openapiFields.add("opponent_position");
    openapiFields.add("own_goals");
    openapiFields.add("own_manager_name");
    openapiFields.add("own_position");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ClubGames
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ClubGames.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClubGames is not found in the empty JSON string", ClubGames.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ClubGames.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClubGames` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("hosting") != null && !jsonObj.get("hosting").isJsonNull()) && !jsonObj.get("hosting").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hosting` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hosting").toString()));
      }
      if ((jsonObj.get("opponent_manager_name") != null && !jsonObj.get("opponent_manager_name").isJsonNull()) && !jsonObj.get("opponent_manager_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `opponent_manager_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("opponent_manager_name").toString()));
      }
      if ((jsonObj.get("own_manager_name") != null && !jsonObj.get("own_manager_name").isJsonNull()) && !jsonObj.get("own_manager_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `own_manager_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("own_manager_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClubGames.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClubGames' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClubGames> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClubGames.class));

       return (TypeAdapter<T>) new TypeAdapter<ClubGames>() {
           @Override
           public void write(JsonWriter out, ClubGames value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClubGames read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ClubGames given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ClubGames
  * @throws IOException if the JSON string is invalid with respect to ClubGames
  */
  public static ClubGames fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClubGames.class);
  }

 /**
  * Convert an instance of ClubGames to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

