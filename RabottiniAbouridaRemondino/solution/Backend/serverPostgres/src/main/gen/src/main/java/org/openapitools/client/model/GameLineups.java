/*
 * MongoDBServerDocumentation
 * Documentation of MongoDB Server
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: zakaria.abourida@edu.unito.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GameLineups
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-16T12:05:23.588206+01:00[Europe/Rome]")
public class GameLineups {
  public static final String SERIALIZED_NAME_CLUB_ID = "club_id";
  @SerializedName(SERIALIZED_NAME_CLUB_ID)
  private BigDecimal clubId;

  public static final String SERIALIZED_NAME_GAME_ID = "game_id";
  @SerializedName(SERIALIZED_NAME_GAME_ID)
  private BigDecimal gameId;

  public static final String SERIALIZED_NAME_GAME_LINEUPS_ID = "game_lineups_id";
  @SerializedName(SERIALIZED_NAME_GAME_LINEUPS_ID)
  private BigDecimal gameLineupsId;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private BigDecimal number;

  public static final String SERIALIZED_NAME_PLAYER_ID = "player_id";
  @SerializedName(SERIALIZED_NAME_PLAYER_ID)
  private BigDecimal playerId;

  public static final String SERIALIZED_NAME_PLAYER_NAME = "player_name";
  @SerializedName(SERIALIZED_NAME_PLAYER_NAME)
  private String playerName;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private String position;

  public static final String SERIALIZED_NAME_TEAM_CAPTAIN = "team_captain";
  @SerializedName(SERIALIZED_NAME_TEAM_CAPTAIN)
  private BigDecimal teamCaptain;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public GameLineups() {
  }

  public GameLineups clubId(BigDecimal clubId) {
    
    this.clubId = clubId;
    return this;
  }

   /**
   * Get clubId
   * @return clubId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getClubId() {
    return clubId;
  }


  public void setClubId(BigDecimal clubId) {
    this.clubId = clubId;
  }


  public GameLineups gameId(BigDecimal gameId) {
    
    this.gameId = gameId;
    return this;
  }

   /**
   * Get gameId
   * @return gameId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getGameId() {
    return gameId;
  }


  public void setGameId(BigDecimal gameId) {
    this.gameId = gameId;
  }


  public GameLineups gameLineupsId(BigDecimal gameLineupsId) {
    
    this.gameLineupsId = gameLineupsId;
    return this;
  }

   /**
   * Get gameLineupsId
   * @return gameLineupsId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getGameLineupsId() {
    return gameLineupsId;
  }


  public void setGameLineupsId(BigDecimal gameLineupsId) {
    this.gameLineupsId = gameLineupsId;
  }


  public GameLineups number(BigDecimal number) {
    
    this.number = number;
    return this;
  }

   /**
   * Get number
   * @return number
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getNumber() {
    return number;
  }


  public void setNumber(BigDecimal number) {
    this.number = number;
  }


  public GameLineups playerId(BigDecimal playerId) {
    
    this.playerId = playerId;
    return this;
  }

   /**
   * Get playerId
   * @return playerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getPlayerId() {
    return playerId;
  }


  public void setPlayerId(BigDecimal playerId) {
    this.playerId = playerId;
  }


  public GameLineups playerName(String playerName) {
    
    this.playerName = playerName;
    return this;
  }

   /**
   * Get playerName
   * @return playerName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPlayerName() {
    return playerName;
  }


  public void setPlayerName(String playerName) {
    this.playerName = playerName;
  }


  public GameLineups position(String position) {
    
    this.position = position;
    return this;
  }

   /**
   * Get position
   * @return position
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPosition() {
    return position;
  }


  public void setPosition(String position) {
    this.position = position;
  }


  public GameLineups teamCaptain(BigDecimal teamCaptain) {
    
    this.teamCaptain = teamCaptain;
    return this;
  }

   /**
   * Get teamCaptain
   * @return teamCaptain
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getTeamCaptain() {
    return teamCaptain;
  }


  public void setTeamCaptain(BigDecimal teamCaptain) {
    this.teamCaptain = teamCaptain;
  }


  public GameLineups type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GameLineups gameLineups = (GameLineups) o;
    return Objects.equals(this.clubId, gameLineups.clubId) &&
        Objects.equals(this.gameId, gameLineups.gameId) &&
        Objects.equals(this.gameLineupsId, gameLineups.gameLineupsId) &&
        Objects.equals(this.number, gameLineups.number) &&
        Objects.equals(this.playerId, gameLineups.playerId) &&
        Objects.equals(this.playerName, gameLineups.playerName) &&
        Objects.equals(this.position, gameLineups.position) &&
        Objects.equals(this.teamCaptain, gameLineups.teamCaptain) &&
        Objects.equals(this.type, gameLineups.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clubId, gameId, gameLineupsId, number, playerId, playerName, position, teamCaptain, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GameLineups {\n");
    sb.append("    clubId: ").append(toIndentedString(clubId)).append("\n");
    sb.append("    gameId: ").append(toIndentedString(gameId)).append("\n");
    sb.append("    gameLineupsId: ").append(toIndentedString(gameLineupsId)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    playerId: ").append(toIndentedString(playerId)).append("\n");
    sb.append("    playerName: ").append(toIndentedString(playerName)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    teamCaptain: ").append(toIndentedString(teamCaptain)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("club_id");
    openapiFields.add("game_id");
    openapiFields.add("game_lineups_id");
    openapiFields.add("number");
    openapiFields.add("player_id");
    openapiFields.add("player_name");
    openapiFields.add("position");
    openapiFields.add("team_captain");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GameLineups
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (GameLineups.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in GameLineups is not found in the empty JSON string", GameLineups.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GameLineups.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GameLineups` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("player_name") != null && !jsonObj.get("player_name").isJsonNull()) && !jsonObj.get("player_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `player_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("player_name").toString()));
      }
      if ((jsonObj.get("position") != null && !jsonObj.get("position").isJsonNull()) && !jsonObj.get("position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("position").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GameLineups.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GameLineups' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GameLineups> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GameLineups.class));

       return (TypeAdapter<T>) new TypeAdapter<GameLineups>() {
           @Override
           public void write(JsonWriter out, GameLineups value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GameLineups read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GameLineups given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GameLineups
  * @throws IOException if the JSON string is invalid with respect to GameLineups
  */
  public static GameLineups fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GameLineups.class);
  }

 /**
  * Convert an instance of GameLineups to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

