/*
 * Main Server Documentation
 * Il Main Server è un'applicazione Node.js basata su Express, progettata per facilitare la comunicazione tra un'applicazione front-end e due server: uno Spring Boot ed un altro Express. Questo server gestisce varie route per fornire servizi come il recupero di informazioni sulle squadre, competizioni e giocatori nel contesto del calcio. Utilizzando richieste HTTP con il modulo axios. La documentazione Swagger è in corso di sviluppo per guidare chiaramente l'uso delle API del server. Con una gestione degli errori attenta e un codice organizzato modularmente.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: zakaria.abourida@edu.unito.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PlayerInfoRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-22T01:26:25.750006+01:00[Europe/Rome]")
public class PlayerInfoRequest {
  public static final String SERIALIZED_NAME_PLAYER_NAME = "playerName";
  @SerializedName(SERIALIZED_NAME_PLAYER_NAME)
  private String playerName;

  public PlayerInfoRequest() {
  }

  public PlayerInfoRequest playerName(String playerName) {
    
    this.playerName = playerName;
    return this;
  }

   /**
   * Get playerName
   * @return playerName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPlayerName() {
    return playerName;
  }


  public void setPlayerName(String playerName) {
    this.playerName = playerName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayerInfoRequest playerInfoRequest = (PlayerInfoRequest) o;
    return Objects.equals(this.playerName, playerInfoRequest.playerName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(playerName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayerInfoRequest {\n");
    sb.append("    playerName: ").append(toIndentedString(playerName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("playerName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PlayerInfoRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (PlayerInfoRequest.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlayerInfoRequest is not found in the empty JSON string", PlayerInfoRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PlayerInfoRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlayerInfoRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("playerName") != null && !jsonObj.get("playerName").isJsonNull()) && !jsonObj.get("playerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `playerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("playerName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlayerInfoRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlayerInfoRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlayerInfoRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlayerInfoRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PlayerInfoRequest>() {
           @Override
           public void write(JsonWriter out, PlayerInfoRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlayerInfoRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PlayerInfoRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PlayerInfoRequest
  * @throws IOException if the JSON string is invalid with respect to PlayerInfoRequest
  */
  public static PlayerInfoRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlayerInfoRequest.class);
  }

 /**
  * Convert an instance of PlayerInfoRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

